"use strict";(self.webpackChunksyncra_docs=self.webpackChunksyncra_docs||[]).push([[3188],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>f});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var i=n.createContext({}),c=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(i.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,l=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(r),m=a,f=d["".concat(i,".").concat(m)]||d[m]||p[m]||l;return r?n.createElement(f,o(o({ref:t},u),{},{components:r})):n.createElement(f,o({ref:t},u))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=r.length,o=new Array(l);o[0]=m;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[d]="string"==typeof e?e:a,o[1]=s;for(var c=2;c<l;c++)o[c]=r[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},9064:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>p,frontMatter:()=>l,metadata:()=>s,toc:()=>c});var n=r(7462),a=(r(7294),r(3905));const l={sidebar_position:1},o="Votes",s={unversionedId:"technical/smart-contracts/traits/votes",id:"technical/smart-contracts/traits/votes",title:"Votes",description:'The Votes trait is the interface for "what" is the voting power in a DAO.',source:"@site/docs/technical/smart-contracts/traits/votes.md",sourceDirName:"technical/smart-contracts/traits",slug:"/technical/smart-contracts/traits/votes",permalink:"/syncra-docs/technical/smart-contracts/traits/votes",draft:!1,editUrl:"https://github.com/jsk28/syncra-docs/edit/main/docs/technical/smart-contracts/traits/votes.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Types and Data Structures",permalink:"/syncra-docs/technical/smart-contracts/structures/"},next:{title:"Governor",permalink:"/syncra-docs/technical/smart-contracts/traits/governor"}},i={},c=[{value:"Methods",id:"methods",level:2},{value:"get_votes",id:"get_votes",level:3},{value:"delegate",id:"delegate",level:3},{value:"delegates",id:"delegates",level:3}],u={toc:c},d="wrapper";function p(e){let{components:t,...r}=e;return(0,a.kt)(d,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"votes"},"Votes"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"Votes"),' trait is the interface for "what" is the voting power in a DAO.'),(0,a.kt)("h2",{id:"methods"},"Methods"),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"get_votes"},"get_votes"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"get_votes(&self, account: AccountId, timestamp: Option<Timestamp>) -> Balance;\n")),(0,a.kt)("p",null,"Returns the voting power of a given ",(0,a.kt)("inlineCode",{parentName:"p"},"account")," at specified ",(0,a.kt)("inlineCode",{parentName:"p"},"timestamp")," (if applicable)."),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Arguments"),(0,a.kt)("div",null,(0,a.kt)("ul",null,(0,a.kt)("li",null,(0,a.kt)("b",null,"account")," - Address of the account for which we query the voting power."),(0,a.kt)("li",null,(0,a.kt)("b",null,"timestamp")," - Optional Timestamp in miliseconds at which we query the voting power.")))),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"delegate"},"delegate"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"fn delegate(&mut self, delegatee: AccountId) -> Result<(), VotesError>;\n")),(0,a.kt)("p",null,"Delegates the voting power of the caller to ",(0,a.kt)("inlineCode",{parentName:"p"},"delegatee"),"."),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Arguments"),(0,a.kt)("div",null,(0,a.kt)("ul",null,(0,a.kt)("li",null,(0,a.kt)("b",null,"delegatee")," - Address of the account for which we delegate the voting power.")))),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"delegates"},"delegates"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"fn delegates(&mut self, delegator: AccountId) -> Option<AccountId>;\n")),(0,a.kt)("p",null,"Returns the address of of the delegatee of the ",(0,a.kt)("inlineCode",{parentName:"p"},"delegator"),"."),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Arguments"),(0,a.kt)("div",null,(0,a.kt)("ul",null,(0,a.kt)("li",null,(0,a.kt)("b",null,"delegator")," - Address of the account for which we query the address of the delegatee.")))),(0,a.kt)("hr",null))}p.isMDXComponent=!0}}]);