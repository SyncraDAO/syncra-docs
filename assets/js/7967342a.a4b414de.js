"use strict";(self.webpackChunksyncra_docs=self.webpackChunksyncra_docs||[]).push([[104],{3905:(t,e,n)=>{n.d(e,{Zo:()=>u,kt:()=>h});var r=n(7294);function o(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function a(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function l(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?a(Object(n),!0).forEach((function(e){o(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function s(t,e){if(null==t)return{};var n,r,o=function(t,e){if(null==t)return{};var n,r,o={},a=Object.keys(t);for(r=0;r<a.length;r++)n=a[r],e.indexOf(n)>=0||(o[n]=t[n]);return o}(t,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);for(r=0;r<a.length;r++)n=a[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(o[n]=t[n])}return o}var i=r.createContext({}),c=function(t){var e=r.useContext(i),n=e;return t&&(n="function"==typeof t?t(e):l(l({},e),t)),n},u=function(t){var e=c(t.components);return r.createElement(i.Provider,{value:e},t.children)},p="mdxType",d={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},m=r.forwardRef((function(t,e){var n=t.components,o=t.mdxType,a=t.originalType,i=t.parentName,u=s(t,["components","mdxType","originalType","parentName"]),p=c(n),m=o,h=p["".concat(i,".").concat(m)]||p[m]||d[m]||a;return n?r.createElement(h,l(l({ref:e},u),{},{components:n})):r.createElement(h,l({ref:e},u))}));function h(t,e){var n=arguments,o=e&&e.mdxType;if("string"==typeof t||o){var a=n.length,l=new Array(a);l[0]=m;var s={};for(var i in e)hasOwnProperty.call(e,i)&&(s[i]=e[i]);s.originalType=t,s[p]="string"==typeof t?t:o,l[1]=s;for(var c=2;c<a;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5322:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>i,contentTitle:()=>l,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var r=n(7462),o=(n(7294),n(3905));const a={sidebar_position:2},l="Governor",s={unversionedId:"technical/smart-contracts/traits/governor",id:"technical/smart-contracts/traits/governor",title:"Governor",description:"The Governor trait is the core abstraction for the basic governance in a DAO. Governor extends Votes and openbrush::AccessControltraits.",source:"@site/docs/technical/smart-contracts/traits/governor.md",sourceDirName:"technical/smart-contracts/traits",slug:"/technical/smart-contracts/traits/governor",permalink:"/technical/smart-contracts/traits/governor",draft:!1,editUrl:"https://github.com/SyncraDAO/syncra-docs/edit/main/docs/technical/smart-contracts/traits/governor.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Votes",permalink:"/technical/smart-contracts/traits/votes"},next:{title:"Timelock",permalink:"/technical/smart-contracts/traits/timelock"}},i={},c=[{value:"Methods",id:"methods",level:2},{value:"hash_proposal",id:"hash_proposal",level:3},{value:"propose",id:"propose",level:3},{value:"cast_vote",id:"cast_vote",level:3},{value:"execute",id:"execute",level:3}],u={toc:c},p="wrapper";function d(t){let{components:e,...n}=t;return(0,o.kt)(p,(0,r.Z)({},u,n,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"governor"},"Governor"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"Governor")," trait is the core abstraction for the basic governance in a DAO. ",(0,o.kt)("inlineCode",{parentName:"p"},"Governor")," extends ",(0,o.kt)("inlineCode",{parentName:"p"},"Votes")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"openbrush::contracts::access_control::AccessControl"),"traits."),(0,o.kt)("h2",{id:"methods"},"Methods"),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"hash_proposal"},"hash_proposal"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"fn hash_proposal(\n       &self,\n       description: String,\n       transactions: Vec<Transaction>,\n       salt: [u8; 32],\n   ) -> ProposalId;\n")),(0,o.kt)("p",null,"Returns a unique hash of a proposal."),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Arguments"),(0,o.kt)("div",null,(0,o.kt)("ul",null,(0,o.kt)("li",null,(0,o.kt)("b",null,"description")," - Description of the proposal."),(0,o.kt)("li",null,(0,o.kt)("b",null,"transactions")," - List of transactions to be executed if the proposal is successful."),(0,o.kt)("li",null,(0,o.kt)("b",null,"salt")," - Random bytes used as a salt for hashing algorithm.")))),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"propose"},"propose"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"fn propose(\n       &mut self,\n       voting_options: u8,\n       description: String,\n       transactions: Vec<Transaction>,\n       salt: [u8; 32],\n   ) -> Result<ProposalId, GovernorError>;\n")),(0,o.kt)("p",null,"Creates a new proposal."),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Arguments"),(0,o.kt)("div",null,(0,o.kt)("ul",null,(0,o.kt)("li",null,(0,o.kt)("b",null,"voting_options")," - Number of voting options (must be at least 1)."),(0,o.kt)("li",null,(0,o.kt)("b",null,"description")," - Description of the proposal."),(0,o.kt)("li",null,(0,o.kt)("b",null,"transactions")," - List of transactions to be executed if the proposal is successful."),(0,o.kt)("li",null,(0,o.kt)("b",null,"salt")," - Random bytes used as a salt for hashing algorithm.")))),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"cast_vote"},"cast_vote"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"fn cast_vote(&mut self, propsal_id: ProposalId, option: u8) -> Result<(),GovernorError>;\n")),(0,o.kt)("p",null,"Casts a vote on a specified proposal."),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Arguments"),(0,o.kt)("div",null,(0,o.kt)("ul",null,(0,o.kt)("li",null,(0,o.kt)("b",null,"propsal_id")," - Unique proposal id (hash)."),(0,o.kt)("li",null,(0,o.kt)("b",null,"option")," - Index of the voting option.")))),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"execute"},"execute"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"fn execute(\n       &mut self,\n       description_hash: Hash,\n       transactions: Vec<Transaction>,\n       salt: [u8;32]\n   ) -> Result<(), GovernorError>;\n")),(0,o.kt)("p",null,"Executes Transactions of a successful proposal."),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Arguments"),(0,o.kt)("div",null,(0,o.kt)("ul",null,(0,o.kt)("li",null,(0,o.kt)("b",null,"description_hash")," - Hash of the description of the proposal."),(0,o.kt)("li",null,(0,o.kt)("b",null,"transactions")," - List of transactions to be executed if the proposal is successful."),(0,o.kt)("li",null,(0,o.kt)("b",null,"salt")," - Random bytes used as a salt for hashing algorithm.")))),(0,o.kt)("hr",null))}d.isMDXComponent=!0}}]);